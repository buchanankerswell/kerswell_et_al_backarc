FUNCTION  <SNR>17_notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:186
Called 240 times
Total time:   0.023267
 Self time:   0.021938

count  total (s)   self (s)
  240   0.003815   0.002486   let channel = coc#client#get_channel(self)
  240              0.000698   if empty(channel)
                                return ''
  240              0.000196   endif
  240              0.000247   try
  240              0.000268     if s:is_vim
  240              0.006273       call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
                                else
                                  call call('rpcnotify', [channel, a:method] + a:args)
  240              0.000225     endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0)
                                    return
                                  endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
                                endif
  240              0.000254   endtry

FUNCTION  coc#client#get_channel()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:146
Called 241 times
Total time:   0.001334
 Self time:   0.001334

count  total (s)   self (s)
  241              0.000433   if s:is_vim
  241              0.000630     return a:client['channel']
                              endif
                              return a:client['chan_id']

FUNCTION  2()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:131
Called 8 times
Total time:   0.000600
 Self time:   0.000362

count  total (s)   self (s)
    8   0.000597   0.000359   call gitgutter#utility#setbufvar(a:buffer, 'path', -2)

FUNCTION  <SNR>115_build_command()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim:43
Called 4 times
Total time:   0.000036
 Self time:   0.000036

count  total (s)   self (s)
    4              0.000016   if has('unix')
    4              0.000015     return ['sh', '-c', a:cmd]
                              endif
                            
                              if has('win32')
                                return has('nvim') ? ['cmd.exe', '/c', a:cmd] : 'cmd.exe /c '.a:cmd
                              endif
                            
                              throw 'unknown os'

FUNCTION  gitgutter#process_buffer()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter.vim:21
Called 4 times
Total time:   0.015899
 Self time:   0.000724

count  total (s)   self (s)
                              " NOTE a:bufnr is not necessarily the current buffer.
                            
    4   0.003474   0.000160   if gitgutter#utility#is_active(a:bufnr)
                            
    4              0.000042     if has('patch-7.4.1559')
    4              0.000058       let l:Callback = function('gitgutter#process_buffer', [a:bufnr, a:force])
                                else
                                  let l:Callback = {'function': 'gitgutter#process_buffer', 'arguments': [a:bufnr, a:force]}
    4              0.000006     endif
    4   0.012156   0.000295     let how = s:setup_path(a:bufnr, l:Callback)
    4              0.000062     if [how] == ['async']  " avoid string-to-number conversion if how is a number
    4              0.000009       return
                                endif
                            
                                if a:force || s:has_fresh_changes(a:bufnr)
                            
                                  let diff = 'NOT SET'
                                  try
                                    let diff = gitgutter#diff#run_diff(a:bufnr, g:gitgutter_diff_relative_to, 0)
                                  catch /gitgutter not tracked/
                                    call gitgutter#debug#log('Not tracked: '.gitgutter#utility#file(a:bufnr))
                                  catch /gitgutter diff failed/
                                    call gitgutter#debug#log('Diff failed: '.gitgutter#utility#file(a:bufnr))
                                    call gitgutter#hunk#reset(a:bufnr)
                                  endtry
                            
                                  if diff != 'async' && diff != 'NOT SET'
                                    call gitgutter#diff#handler(a:bufnr, diff)
                                  endif
                            
                                endif
                              endif

FUNCTION  gitgutter#utility#repo_path()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:112
Called 4 times
Total time:   0.000799
 Self time:   0.000164

count  total (s)   self (s)
    4   0.000771   0.000136   let p = gitgutter#utility#getbufvar(a:bufnr, 'path', '')
    4              0.000023   return a:shellesc ? gitgutter#utility#shellescape(p) : p

FUNCTION  airline#extensions#coc#get_error()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:14
Called 124 times
Total time:   0.004692
 Self time:   0.001061

count  total (s)   self (s)
  124   0.004621   0.000990   return airline#extensions#coc#get('error')

FUNCTION  RVimLeave()
    Defined: ~/.vim/plugged/Nvim-R/R/common_global.vim:3142
Called 1 time
Total time:   0.013395
 Self time:   0.000467

count  total (s)   self (s)
    1              0.000014     if has('nvim')
                                    for job in keys(g:rplugin.jobs)
                                        if IsJobRunning(job)
                                            if job == 'ClientServer'
                                                " Avoid warning of exit status 141
                                                call JobStdin(g:rplugin.jobs["ClientServer"], "\x08\n")
                                                sleep 20m
                                            endif
                                        endif
                                    endfor
    1              0.000001     endif
                            
    2              0.000011     for fn in s:del_list
    1              0.000045         call delete(fn)
    2              0.000004     endfor
    1              0.000111     if executable("rmdir")
    1   0.013163   0.000235         call system("rmdir '" . g:rplugin.tmpdir . "'")
    1              0.000009     endif

FUNCTION  airline#check_mode()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:199
Called 124 times
Total time:   0.051943
 Self time:   0.019468

count  total (s)   self (s)
  124              0.000509   if !has_key(s:contexts, a:winnr)
                                return ''
  124              0.000116   endif
  124              0.000493   let context = s:contexts[a:winnr]
                            
  124              0.000514   if get(w:, 'airline_active', 1)
  124              0.000414     let l:m = mode(1)
  124              0.000310     if l:m ==# "i"
   25              0.000070       let l:mode = ['insert']
   99              0.000286     elseif l:m[0] ==# "i"
   27              0.000079       let l:mode = ['insert']
   72              0.000118     elseif l:m ==# "Rv"
                                  let l:mode =['replace']
   72              0.000155     elseif l:m[0] ==# "R"
                                  let l:mode = ['replace']
   72              0.000829     elseif l:m[0] =~# '\v(v|V||s|S|)'
                                  let l:mode = ['visual']
   72              0.000127     elseif l:m ==# "t"
                                  let l:mode = ['terminal']
   72              0.000166     elseif l:m[0] ==# "c"
                                  let l:mode = ['commandline']
   72              0.000134     elseif l:m ==# "no"   " does not work, most likely, Vim does not refresh the statusline in OP mode
                                  let l:mode = ['normal']
   72              0.000233     elseif l:m[0:1] ==# 'ni'
                                  let l:mode = ['insert']
                                  let l:m = 'ni'
   72              0.000057     else
   72              0.000186       let l:mode = ['normal']
  124              0.000128     endif
  124              0.000729     if exists("*VMInfos") && !empty(VMInfos())
                                  " Vim plugin Multiple Cursors https://github.com/mg979/vim-visual-multi
                                  let l:m = 'multi'
  124              0.000101     endif
  124              0.000975     if index(['Rv', 'no', 'ni', 'ix', 'ic', 'multi'], l:m) == -1
   97              0.000290       let l:m = l:m[0]
  124              0.000095     endif
  124              0.000855     let w:airline_current_mode = get(g:airline_mode_map, l:m, l:m)
                              else
                                let l:mode = ['inactive']
                                let w:airline_current_mode = get(g:airline_mode_map, '__')
  124              0.000101   endif
                            
  124              0.000399   if g:airline_detect_modified && &modified
  124              0.000538     call add(l:mode, 'modified')
  124              0.000101   endif
                            
  124              0.000240   if g:airline_detect_paste && &paste
                                call add(l:mode, 'paste')
  124              0.000100   endif
                            
  124              0.000626   if g:airline_detect_crypt && exists("+key") && !empty(&key)
                                call add(l:mode, 'crypt')
  124              0.000080   endif
                            
  124              0.000254   if g:airline_detect_spell && &spell
  124              0.000350     call add(l:mode, 'spell')
  124              0.000090   endif
                            
  124              0.000220   if &readonly || ! &modifiable
                                call add(l:mode, 'readonly')
  124              0.000082   endif
                            
  124              0.000640   let mode_string = join(l:mode)
  124              0.000614   if get(w:, 'airline_lastmode', '') != mode_string
    2   0.000103   0.000039     call airline#highlighter#highlight_modified_inactive(context.bufnr)
    2   0.032165   0.000041     call airline#highlighter#highlight(l:mode, context.bufnr)
    2   0.000309   0.000022     call airline#util#doautocmd('AirlineModeChanged')
    2              0.000005     let w:airline_lastmode = mode_string
  124              0.000092   endif
                            
  124              0.000145   return ''

FUNCTION  <SNR>96_get_hunks_gitgutter()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:60
Called 124 times
Total time:   0.054040
 Self time:   0.002888

count  total (s)   self (s)
  124   0.002303   0.001357   if !get(g:, 'gitgutter_enabled', 0) || s:is_branch_empty()
                                return ''
  124              0.000087   endif
  124   0.051383   0.001177   return GitGutterGetHunkSummary()

FUNCTION  airline#util#append()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:49
Called 868 times
Total time:   0.013575
 Self time:   0.013575

count  total (s)   self (s)
  868              0.002913   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  868              0.000625   endif
  868              0.004429   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
  868              0.003703   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  <SNR>95_hl_group_exists()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:93
Called 68 times
Total time:   0.000879
 Self time:   0.000879

count  total (s)   self (s)
   68              0.000212   if !hlexists(a:group)
                                return 0
   68              0.000365   elseif empty(synIDattr(hlID(a:group), 'fg'))
                                return 0
   68              0.000041   endif
   68              0.000058   return 1

FUNCTION  airline#extensions#coc#get_warning()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:10
Called 124 times
Total time:   0.005300
 Self time:   0.001144

count  total (s)   self (s)
  124   0.005243   0.001087   return airline#extensions#coc#get('warning')

FUNCTION  airline#extensions#coc#get_status()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:46
Called 124 times
Total time:   0.005450
 Self time:   0.001333

count  total (s)   self (s)
                              " Shorten text for windows < 91 characters
  124   0.005301   0.001184   return airline#util#shorten(get(g:, 'coc_status', ''), 91, 9)

FUNCTION  gitgutter#utility#set_repo_path()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:139
Called 4 times
Total time:   0.010310
 Self time:   0.000809

count  total (s)   self (s)
                              " Values of path:
                              " * non-empty string - path
                              " *               -1 - pending
                              " *               -2 - not tracked by git
                            
    4   0.000869   0.000117   call gitgutter#utility#setbufvar(a:bufnr, 'path', -1)
    4   0.002728   0.000232   let cmd = gitgutter#utility#cd_cmd(a:bufnr, g:gitgutter_git_executable.' '.g:gitgutter_git_args.' ls-files --error-unmatch --full-name -z -- '.gitgutter#utility#shellescape(s:filename(a:bufnr)))
                            
    4   0.000099   0.000084   if g:gitgutter_async && gitgutter#async#available() && !has('vim_starting')
    4              0.000032     let handler = copy(s:set_path_handler)
    4              0.000016     let handler.continuation = a:continuation
    4   0.006435   0.000197     call gitgutter#async#execute(cmd, a:bufnr, handler)
    4              0.000048     return 'async'
                              endif
                            
                              let path = gitgutter#utility#system(cmd)
                              if v:shell_error
                                call gitgutter#utility#setbufvar(a:bufnr, 'path', -2)
                              else
                                call gitgutter#utility#setbufvar(a:bufnr, 'path', s:strip_trailing_new_line(path))
                              endif

FUNCTION  <SNR>20_abs_path()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:205
Called 214 times
Total time:   0.030125
 Self time:   0.030125

count  total (s)   self (s)
  214              0.022212   let p = resolve(expand('#'.a:bufnr.':p'))
                            
                              " Remove extra parts from fugitive's filepaths
  214              0.006275   let p = substitute(substitute(p, '^fugitive:', '', ''), '\v\.git/\x{40,}/', '', '')
                            
  214              0.000957   return a:shellesc ? gitgutter#utility#shellescape(p) : p

FUNCTION  coc#util#get_buf_lines()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:604
Called 35 times
Total time:   0.003823
 Self time:   0.003823

count  total (s)   self (s)
   35              0.000503   if !bufloaded(a:bufnr) | return '' | endif
   35              0.000306   let changedtick = getbufvar(a:bufnr, 'changedtick')
   35              0.000145   if changedtick == a:changedtick
    7              0.000014     return v:null
   28              0.000042   endif
   28              0.002589   return { 'lines': getbufline(a:bufnr, 1, '$'), 'changedtick': getbufvar(a:bufnr, 'changedtick') }

FUNCTION  coc#rpc#ready()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:31
Called 241 times
Total time:   0.002629
 Self time:   0.002629

count  total (s)   self (s)
  241              0.001516   if empty(s:client) || s:client['running'] == 0
                                return 0
  241              0.000203   endif
  241              0.000276   return 1

FUNCTION  coc#util#cursor()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:35
Called 15 times
Total time:   0.000626
 Self time:   0.000626

count  total (s)   self (s)
   15              0.000592   return [line('.') - 1, strchars(strpart(getline('.'), 0, col('.') - 1))]

FUNCTION  airline#parts#filetype()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:102
Called 124 times
Total time:   0.002823
 Self time:   0.001486

count  total (s)   self (s)
  124   0.002768   0.001431   return (airline#util#winwidth() < 90 && strlen(&filetype) > 3) ? matchstr(&filetype, '...'). (&encoding is? 'utf-8' ? '…' : '>') : &filetype

FUNCTION  airline#parts#iminsert()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:82
Called 124 times
Total time:   0.001000
 Self time:   0.001000

count  total (s)   self (s)
  124              0.000400   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
  124              0.000093   endif
  124              0.000121   return ''

FUNCTION  <SNR>95_exec_separator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:183
Called 14 times
Total time:   0.009856
 Self time:   0.000678

count  total (s)   self (s)
   14              0.000028   if pumvisible()
                                return
   14              0.000006   endif
   14              0.000052   let group = a:from.'_to_'.a:to.a:suffix
   14   0.002772   0.000122   let l:from = airline#themes#get_highlight(a:from.a:suffix)
   14   0.002703   0.000108   let l:to = airline#themes#get_highlight(a:to.a:suffix)
   14              0.000018   if a:inverse
    4              0.000023     let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
   10              0.000006   else
   10              0.000055     let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
   14              0.000011   endif
   14              0.000048   let a:dict[group] = colors
   14   0.004052   0.000119   call airline#highlighter#exec(group, colors)

FUNCTION  coc#rpc#request()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:88
Called 1 time
Total time:   0.003754
 Self time:   0.000045

count  total (s)   self (s)
    1   0.000020   0.000009   if !coc#rpc#ready()
                                return ''
    1              0.000001   endif
    1   0.003731   0.000033   return s:client['request'](a:method, a:args)

FUNCTION  gitgutter#async#execute()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim:16
Called 4 times
Total time:   0.006238
 Self time:   0.005649

count  total (s)   self (s)
    4   0.000301   0.000047   call gitgutter#debug#log('[async] '.a:cmd)
                            
    4              0.000037   let options = {   'stdoutbuffer': [],   'buffer': a:bufnr,   'handler': a:handler }
    4   0.000095   0.000059   let command = s:build_command(a:cmd)
                            
    4              0.000024   if has('nvim')
                                call jobstart(command, extend(options, {   'on_stdout': function('s:on_stdout_nvim'),   'on_stderr': function('s:on_stderr_nvim'),   'on_exit':   function('s:on_exit_nvim') }))
    4              0.000005   else
    4              0.003702     let job = job_start(command, {   'out_cb':   function('s:on_stdout_vim', options),   'err_cb':   function('s:on_stderr_vim', options),   'close_cb': function('s:on_exit_vim', options) })
    4   0.001907   0.001608     let s:jobs[s:job_id(job)] = 1
    4              0.000011   endif

FUNCTION  coc#_hide()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:90
Called 4 times
Total time:   0.000029
 Self time:   0.000029

count  total (s)   self (s)
    4              0.000020   if !pumvisible() | return | endif
    1              0.000006   call feedkeys("\<C-e>", 'in')

FUNCTION  airline#extensions#coc#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:18
Called 248 times
Total time:   0.007787
 Self time:   0.007787

count  total (s)   self (s)
  248              0.000963   if !exists(':CocCommand')
                                return ''
  248              0.000173   endif
  248              0.000961   let _backup = get(g:, 'coc_stl_format', '')
  248              0.000694   let is_err = (a:type  is# 'error')
  248              0.000297   if is_err
  124              0.000533     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_err', '%E{[%e(#%fe)]}')
  124              0.000102   else
  124              0.000589     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_warn', '%W{[%w(#%fw)]}')
  248              0.000182   endif
  248              0.000928   let info = get(b:, 'coc_diagnostic_info', {})
  248              0.000828   if empty(info) | return '' | endif
                            
                            
                              let cnt = get(info, a:type, 0)
                              if !empty(_backup)
                                let g:coc_stl_format = _backup
                              endif
                            
                              if empty(cnt)
                                return ''
                              else
                                let lnum = printf('(L%d)', (info.lnums)[0])
                                return (is_err ? s:error_symbol : s:warning_symbol).cnt.lnum
                              endif

FUNCTION  airline#mode_changed()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:279
Called 2 times
Total time:   0.000053
 Self time:   0.000038

count  total (s)   self (s)
                              " airline#visual_active
                              " Boolean: for when to get visual wordcount
                              " needed for the wordcount extension
    2              0.000020   let g:airline#visual_active = (mode() =~? '[vs]')
    2   0.000028   0.000013   call airline#update_tabline()

FUNCTION  gitgutter#utility#getbufvar()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:21
Called 229 times
Total time:   0.005047
 Self time:   0.005047

count  total (s)   self (s)
  229              0.001776   let ggvars = getbufvar(a:buffer, 'gitgutter')
  229              0.001712   if type(ggvars) == type({}) && has_key(ggvars, a:varname)
    4              0.000017     return ggvars[a:varname]
  225              0.000231   endif
  225              0.000265   if a:0
  225              0.000266     return a:1
                              endif

FUNCTION  23()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:75
Called 4 times
Total time:   0.001906
 Self time:   0.001126

count  total (s)   self (s)
    4              0.000019   let res = []
   20              0.000056   for [key, arglist] in a:calls
   16              0.000073     let name = key[5:]
   16              0.000022     try
   16   0.001555   0.000775       call add(res, call(s:funcs[name], arglist))
                                catch /.*/
                                  return [res, v:exception]
   16              0.000019     endtry
   20              0.000024   endfor
    4              0.000011   return [res, v:null]

FUNCTION  29()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:105
Called 12 times
Total time:   0.000758
 Self time:   0.000758

count  total (s)   self (s)
                              " command that could cause cursor vanish
   12              0.000255   if a:command =~# '^echo' || a:command =~# '^redraw' || a:command =~# '^sign place'
                                call timer_start(0, {-> s:execute(a:command)})
   12              0.000019   else
   12              0.000308     execute a:command
   12              0.000016   endif

FUNCTION  <SNR>33_Remove_Matches()
    Defined: /usr/local/Cellar/vim/8.2.2550/share/vim/vim82/plugin/matchparen.vim:196
Called 114 times
Total time:   0.001226
 Self time:   0.001226

count  total (s)   self (s)
  114              0.000541   if exists('w:paren_hl_on') && w:paren_hl_on
                                silent! call matchdelete(3)
                                let w:paren_hl_on = 0
  114              0.000095   endif

FUNCTION  gitgutter#utility#cd_cmd()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:164
Called 4 times
Total time:   0.001634
 Self time:   0.000186

count  total (s)   self (s)
    4   0.000812   0.000129   let cd = s:unc_path(a:bufnr) ? 'pushd' : (gitgutter#utility#windows() && s:dos_shell() ? 'cd /d' : 'cd')
    4   0.000817   0.000052   return cd.' '.s:dir(a:bufnr).' && '.a:cmd

FUNCTION  OnCompleteDone()
    Defined: ~/.vim/plugged/Nvim-R/R/common_global.vim:3645
Called 12 times
Total time:   0.000395
 Self time:   0.000122

count  total (s)   self (s)
   12   0.000351   0.000078     call CloseFloatWin()
   12              0.000035     let s:user_data = {}

FUNCTION  airline#util#winwidth()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:19
Called 1314 times
Total time:   0.015638
 Self time:   0.015638

count  total (s)   self (s)
 1314              0.004607   let nr = get(a:000, 0, 0)
 1314              0.003936   if get(g:, 'airline_statusline_ontop', 0)
                                return &columns
 1314              0.001058   else
 1314              0.003033     return winwidth(nr)
                              endif

FUNCTION  <SNR>20_exists_file()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:223
Called 101 times
Total time:   0.023645
 Self time:   0.005509

count  total (s)   self (s)
  101   0.023571   0.005435   return filereadable(s:abs_path(a:bufnr, 0))

FUNCTION  airline#util#doautocmd()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:176
Called 2 times
Total time:   0.000287
 Self time:   0.000181

count  total (s)   self (s)
    2   0.000285   0.000179   exe printf("silent doautocmd %s User %s", s:nomodeline, a:event)

FUNCTION  30()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:114
Called 19 times
Total time:   0.035125
 Self time:   0.000867

count  total (s)   self (s)
   19   0.035096   0.000838   return eval(a:expr)

FUNCTION  <SNR>20_unc_path()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:169
Called 4 times
Total time:   0.000634
 Self time:   0.000062

count  total (s)   self (s)
    4   0.000629   0.000057   return s:abs_path(a:bufnr, 0) =~ '^\\\\'

FUNCTION  coc#util#get_complete_option()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:337
Called 4 times
Total time:   0.033632
 Self time:   0.033632

count  total (s)   self (s)
    4              0.000022   let pos = getcurpos()
    4              0.000036   let line = getline(pos[1])
    4              0.000485   let input = matchstr(strpart(line, 0, pos[2] - 1), '\k*$')
    4              0.000028   let col = pos[2] - strlen(input)
    4              0.032500   let synname = synIDattr(synID(pos[1], col, 1), 'name')
    4              0.000552   return { 'word': matchstr(strpart(line, col - 1), '^\k\+'), 'input': empty(input) ? '' : input, 'line': line, 'filetype': &filetype, 'filepath': expand('%:p'), 'bufnr': bufnr('%'), 'linenr': pos[1], 'colnr' : pos[2], 'col': col - 1, 'synname': synname, 'changedtick': b:changedtick, 'blacklist': get(b:, 'coc_suggest_blacklist', []),}

FUNCTION  gitgutter#async#available()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim:11
Called 4 times
Total time:   0.000015
 Self time:   0.000015

count  total (s)   self (s)
    4              0.000011   return s:available

FUNCTION  gitgutter#utility#has_repo_path()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:102
Called 4 times
Total time:   0.000947
 Self time:   0.000148

count  total (s)   self (s)
    4   0.000942   0.000143   return index(['', -1, -2], gitgutter#utility#repo_path(a:bufnr, 0)) == -1

FUNCTION  airline#extensions#keymap#status()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/keymap.vim:10
Called 124 times
Total time:   0.007044
 Self time:   0.007044

count  total (s)   self (s)
  124              0.001079   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
  124              0.000780     let short_codes = get(g:, 'airline#extensions#keymap#short_codes', {})
  124              0.001006     let label = get(g:, 'airline#extensions#keymap#label', g:airline_symbols.keymap)
  124              0.000494     let default = get(g:, 'airline#extensions#keymap#default', '')
  124              0.000281     if (label !=# '')
  124              0.000352       let label .= ' '
  124              0.000107     endif
  124              0.000259     let keymap = &keymap
  124              0.000442     if has_key(short_codes, keymap)
                                  let keymap = short_codes[keymap]
  124              0.000103     endif
  124              0.001291     return printf('%s', (!empty(keymap) && &iminsert ? (label . keymap) : (!empty(default) ? label . default : default)))
                              else
                                return ''
                              endif

FUNCTION  airline#util#shorten()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:28
Called 372 times
Total time:   0.013775
 Self time:   0.009055

count  total (s)   self (s)
  372   0.008638   0.003918   if airline#util#winwidth() < a:winwidth && len(split(a:text, '\zs')) > a:minwidth
                                if get(a:000, 0, 0)
                                  " shorten from tail
                                  return '…'.matchstr(a:text, '.\{'.a:minwidth.'}$')
                                else
                                  " shorten from beginning of string
                                  return matchstr(a:text, '^.\{'.a:minwidth.'}').'…'
                                endif
  372              0.000219   else
  372              0.000489     return a:text
                              endif

FUNCTION  61()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:316
Called 1 time
Total time:   0.000105
 Self time:   0.000105

count  total (s)   self (s)
    1              0.000051   let lines = getbufline(a:bufnr, 1, '$')
    1              0.000005   let start = a:start < 0 ? a:start + 1 : a:start
    1              0.000003   let end = a:end < 0 ? a:end + 1 : a:end
    1              0.000005   if a:strict && end > len(lines)
                                throw 'line number out of range: '. end
    1              0.000001   endif
    1              0.000035   return lines[start : end - 1]

FUNCTION  <SNR>14_Autocmd()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim:231
Called 239 times
Total time:   0.035228
 Self time:   0.003878

count  total (s)   self (s)
  239              0.000800   if !g:coc_workspace_initialized
                                return
  239              0.000246   endif
  239   0.033495   0.002145   call coc#rpc#notify('CocAutocmd', a:000)

FUNCTION  airline#update_tabline()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:273
Called 69 times
Total time:   0.000570
 Self time:   0.000570

count  total (s)   self (s)
   69              0.000301   if get(g:, 'airline_statusline_ontop', 0)
                                call airline#extensions#tabline#redraw()
   69              0.000055   endif

FUNCTION  coc#api#call()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:572
Called 56 times
Total time:   0.043518
 Self time:   0.003711

count  total (s)   self (s)
   56              0.000879   let err = v:null
   56              0.000204   let res = v:null
   56              0.000150   try
   56   0.041209   0.001402     let res = call(s:funcs[a:method], a:args)
                              catch /.*/
                                let err = v:exception
   56              0.000117   endtry
   56              0.000216   return [err, res]

FUNCTION  airline#util#wrap()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:42
Called 1116 times
Total time:   0.009068
 Self time:   0.007824

count  total (s)   self (s)
 1116   0.005125   0.003881   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 1116              0.000719   endif
 1116              0.001328   return a:text

FUNCTION  gitgutter#debug#log()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim:70
Called 4 times
Total time:   0.000254
 Self time:   0.000254

count  total (s)   self (s)
    4              0.000010   if g:gitgutter_log
                                if s:new_log_session && gitgutter#async#available()
                                  if exists('*ch_logfile')
                                    call ch_logfile(s:channel_log, 'w')
                                  endif
                                endif
                            
                                execute 'redir >> '.s:log_file
                                  if s:new_log_session
                                    let s:start = reltime()
                                    silent echo "\n==== start log session ===="
                                  endif
                            
                                  let elapsed = reltimestr(reltime(s:start)).' '
                                  silent echo ''
                                  " callers excluding this function
                                  silent echo elapsed.expand('<sfile>')[:-22].':'
                                  silent echo elapsed.s:format_for_log(a:message)
                                  if a:0 && !empty(a:1)
                                    for msg in a:000
                                      silent echo elapsed.s:format_for_log(msg)
                                    endfor
                                  endif
                                redir END
                            
                                let s:new_log_session = 0
    4              0.000004   endif

FUNCTION  <SNR>95_get_array()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:54
Called 96 times
Total time:   0.000681
 Self time:   0.000681

count  total (s)   self (s)
   96              0.000637   return [ a:guifg, a:guibg, a:ctermfg, a:ctermbg, empty(a:opts) ? '' : join(a:opts, ',') ]

FUNCTION  27()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:97
Called 54 times
Total time:   0.005588
 Self time:   0.000972

count  total (s)   self (s)
   54   0.005516   0.000900   return call(a:method, a:args)

FUNCTION  pandoc#command#AutoPandoc()
    Defined: ~/.vim/plugged/vim-pandoc/autoload/pandoc/command.vim:132
Called 1 time
Total time:   0.000027
 Self time:   0.000027

count  total (s)   self (s)
    1              0.000005     if g:pandoc#command#autoexec_on_writes == 1
                                    let command = ''
                                    if exists('g:pandoc#command#autoexec_command')
                                        let command = g:pandoc#command#autoexec_command
                                    endif
                                    if exists('b:pandoc_command_autoexec_command')
                                        let command = b:pandoc_command_autoexec_command
                                    endif
                                    exe command
    1              0.000002     endif

FUNCTION  coc#_cancel()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:95
Called 4 times
Total time:   0.000161
 Self time:   0.000072

count  total (s)   self (s)
                              " hack for close pum
    4              0.000011   if pumvisible()
    1              0.000006     let g:coc#_context = {'start': 0, 'preselect': -1,'candidates': []}
    1              0.000006     call feedkeys("\<Plug>CocRefresh", 'i')
    1   0.000096   0.000007     call coc#rpc#notify('stopCompletion', [])
    4              0.000002   endif

FUNCTION  airline#extensions#hunks#get_raw_hunks()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:76
Called 124 times
Total time:   0.059870
 Self time:   0.005830

count  total (s)   self (s)
  124              0.000940   if !exists('b:source_func') || get(b:, 'source_func', '') is# 's:get_hunks_empty'
                                if get(g:, 'loaded_signify') && sy#buffer_is_active()
                                  let b:source_func = 's:get_hunks_signify'
                                elseif exists('*GitGutterGetHunkSummary')
                                  let b:source_func = 's:get_hunks_gitgutter'
                                elseif exists('*changes#GetStats')
                                  let b:source_func = 's:get_hunks_changes'
                                elseif exists('*quickfixsigns#vcsdiff#GetHunkSummary')
                                  let b:source_func = 'quickfixsigns#vcsdiff#GetHunkSummary'
                                elseif s:coc_git_enabled()
                                  let b:source_func = 's:get_hunks_coc'
                                else
                                  let b:source_func = 's:get_hunks_empty'
                                endif
  124              0.000083   endif
  124   0.055925   0.001885   return {b:source_func}()

FUNCTION  pandoc#folding#MarkdownLevelSA()
    Defined: ~/.vim/plugged/vim-pandoc/autoload/pandoc/folding.vim:230
Called 168685 times
Total time:  19.878976
 Self time:  19.878976

count  total (s)   self (s)
168685              0.512045     let vline = getline(v:lnum)
168685              0.501355     let vline1 = getline(v:lnum + 1)
168685              0.772721     if vline =~# '^#\{1,6}[^.]'
 3067              1.073264         if synIDattr(synID(v:lnum, 1, 1), 'name') =~# '^pandoc\(DelimitedCodeBlock$\)\@!'
 3067              0.009020             if g:pandoc#folding#mode ==# 'relative'
                                            return '>'. len(markdown#headers#CurrentHeaderAncestors(v:lnum))
 3067              0.006467             elseif g:pandoc#folding#mode ==# 'stacked'
                                            return '>1'
 3067              0.002363             else
 3067              0.034624                 return '>'. len(matchstr(vline, '^#\{1,6}'))
                                        endif
                                    endif
165618              2.863976     elseif vline =~# '^[^-=].\+$' && vline1 =~# '^=\+$'
                                    if synIDattr(synID(v:lnum, 1, 1), 'name') =~# '^pandoc\(DelimitedCodeBlock$\)\@!'  && synIDattr(synID(v:lnum + 1, 1, 1), 'name') ==# 'pandocSetexHeader'
                                        return '>1'
                                    endif
165618              2.872399     elseif vline =~# '^[^-=].\+$' && vline1 =~# '^-\+$'
                                    if synIDattr(synID(v:lnum, 1, 1), 'name') =~# '^pandoc\(DelimitedCodeBlock$\)\@!'  && synIDattr(synID(v:lnum + 1, 1, 1), 'name') ==# 'pandocSetexHeader'
                                        if g:pandoc#folding#mode ==# 'relative'
                                            return  '>'. len(markdown#headers#CurrentHeaderAncestors(v:lnum))
                                        elseif g:pandoc#folding#mode ==# 'stacked'
                                            return '>1'
                                        else
                                            return '>2'
                                        endif
                                    endif
165618              0.770751     elseif vline =~? '^<!--.*fold-begin -->'
                                    return 'a1'
165618              0.688122     elseif vline =~? '^<!--.*fold-end -->'
                                    return 's1'
165618              0.718131     elseif vline =~# '^\s*[`~]\{3}'
                                    if g:pandoc#folding#fold_fenced_codeblocks == 1
                                        let synId = synIDattr(synID(v:lnum, match(vline, '[`~]') + 1, 1), 'name')
                                        if synId ==# 'pandocDelimitedCodeBlockStart'
                                            return 'a1'
                                        elseif synId =~# '^pandoc\(DelimitedCodeBlock$\)\@!'
                                            return 's1'
                                        endif
                                    endif
165618              0.096795     endif
165618              0.164827     return '='

FUNCTION  <SNR>14_SyncAutocmd()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim:238
Called 1 time
Total time:   0.003783
 Self time:   0.000029

count  total (s)   self (s)
    1              0.000004   if !g:coc_workspace_initialized
                                return
    1              0.000002   endif
    1              0.000002   if g:coc_service_initialized
    1   0.003765   0.000011     call coc#rpc#request('CocAutocmd', a:000)
                              else
                                call coc#rpc#notify('CocAutocmd', a:000)
    1              0.000001   endif

FUNCTION  <SNR>22_on_window_changed()
    Defined: ~/.vim/plugged/vim-airline/plugin/airline.vim:51
Called 13 times
Total time:   0.000678
 Self time:   0.000678

count  total (s)   self (s)
                              " don't trigger for Vim popup windows
   13              0.000045   if &buftype is# 'popup'
                                return
   13              0.000008   endif
                            
   13              0.000046   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
                                " do not trigger for previewwindows
                                return
   13              0.000006   endif
   13              0.000044   let s:active_winnr = winnr()
                              " Handle each window only once, since we might come here several times for
                              " different autocommands.
   13              0.000166   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
   13              0.000244   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
                                " fugitive is special, it changes names and filetypes several times,
                                " make sure the caching does not get into its way
   13              0.000015     return
                              endif
                              let g:airline_last_window_changed = l:key
                              call s:init()
                              call airline#update_statusline()

FUNCTION  <SNR>33_Highlight_Matching_Pair()
    Defined: /usr/local/Cellar/vim/8.2.2550/share/vim/vim82/plugin/matchparen.vim:40
Called 114 times
Total time:   0.023218
 Self time:   0.021992

count  total (s)   self (s)
                              " Remove any previous match.
  114   0.002072   0.000846   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  114              0.000713   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  114              0.000074   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  114              0.000408   let c_lnum = line('.')
  114              0.000341   let c_col = col('.')
  114              0.000160   let before = 0
                            
  114              0.000423   let text = getline(c_lnum)
  114              0.012054   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
  114              0.000367   if empty(matches)
                                let [c_before, c] = ['', '']
  114              0.000114   else
  114              0.000738     let [c_before, c] = matches[1:2]
  114              0.000093   endif
  114              0.001813   let plist = split(&matchpairs, '.\zs[:,]')
  114              0.000496   let i = index(plist, c)
  114              0.000179   if i < 0
                                " not found, in Insert mode try character before the cursor
  114              0.000650     if c_col > 1 && (mode() == 'i' || mode() == 'R')
   35              0.000116       let before = strlen(c_before)
   35              0.000060       let c = c_before
   35              0.000102       let i = index(plist, c)
  114              0.000093     endif
  114              0.000142     if i < 0
                                  " not found, nothing to do
  114              0.000125       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
                              else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial.
                                let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
                              endif
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if exists('*matchaddpos')
                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  airline#highlighter#highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:237
Called 2 times
Total time:   0.032124
 Self time:   0.005467

count  total (s)   self (s)
    2              0.000006   let bufnr = a:0 ? a:1 : ''
    2              0.000008   let p = g:airline#themes#{g:airline_theme}#palette
                            
                              " draw the base mode, followed by any overrides
    2              0.000045   let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
    2              0.000007   let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
    2              0.000004   let airline_grouplist = []
    2              0.000011   let buffers_in_tabpage = sort(tabpagebuflist())
    2              0.000006   if exists("*uniq")
    2              0.000006     let buffers_in_tabpage = uniq(buffers_in_tabpage)
    2              0.000002   endif
                              " mapped might be something like ['normal', 'normal_modified']
                              " if a group is in both modes available, only define the second
                              " that is how this was done previously overwrite the previous definition
    8              0.000017   for mode in reverse(mapped)
    6              0.000038     if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
    2              0.000009       let dict = g:airline#themes#{g:airline_theme}#palette[mode]
   34              0.000077       for kvp in items(dict)
   32              0.000076         let mode_colors = kvp[1]
   32              0.000069         let name = kvp[0]
   32              0.000106         if name is# 'airline_c' && !empty(bufnr) && suffix is# '_inactive'
                                      let name = 'airline_c'.bufnr
   32              0.000027         endif
                                    " do not re-create highlighting for buffers that are no longer visible
                                    " in the current tabpage
   32              0.000194         if name =~# 'airline_c\d\+'
                                      let bnr = matchstr(name, 'airline_c\zs\d\+') + 0
                                      if bnr > 0 && index(buffers_in_tabpage, bnr) == -1
                                        continue
                                      endif
   32              0.000217         elseif (name =~# '_to_') || (name[0:10] is# 'airline_tab' && !empty(suffix))
                                      " group will be redefined below at exec_separator
                                      " or is not needed for tabline with '_inactive' suffix
                                      " since active flag is 1 for builder)
   14              0.000014           continue
   18              0.000012         endif
   18   0.000330   0.000172         if s:group_not_done(airline_grouplist, name.suffix)
   18   0.005613   0.000184           call airline#highlighter#exec(name.suffix, mode_colors)
   18              0.000013         endif
                            
   18              0.000050         if !has_key(p, 'accents') 
                                      " work around a broken installation
                                      " shouldn't actually happen, p should always contain accents
                                      continue
   18              0.000010         endif
                            
   54              0.000117         for accent in keys(s:accents)
   36              0.000108           if !has_key(p.accents, accent)
                                        continue
   36              0.000037           endif
   36              0.000161           let colors = copy(mode_colors)
   36              0.000119           if p.accents[accent][0] != ''
   18              0.000065             let colors[0] = p.accents[accent][0]
   36              0.000025           endif
   36              0.000097           if p.accents[accent][2] != ''
   18              0.000056             let colors[2] = p.accents[accent][2]
   36              0.000020           endif
   36              0.000079           if len(colors) >= 5
   36              0.000161             let colors[4] = get(p.accents[accent], 4, '')
                                      else
                                        call add(colors, get(p.accents[accent], 4, ''))
   36              0.000026           endif
   36   0.000667   0.000360           if s:group_not_done(airline_grouplist, name.suffix.'_'.accent)
   36   0.011297   0.000390             call airline#highlighter#exec(name.suffix.'_'.accent, colors)
   36              0.000029           endif
   54              0.000048         endfor
   20              0.000015       endfor
                            
    2              0.000005       if empty(s:separators)
                                    " nothing to be done
                                    continue
    2              0.000001       endif
                                  " TODO: optimize this
   16              0.000035       for sep in items(s:separators)
                                    " we cannot check, that the group already exists, else the separators
                                    " might not be correctly defined. But perhaps we can skip above groups
                                    " that match the '_to_' name, because they would be redefined here...
   14   0.010030   0.000174         call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
   16              0.000015       endfor
    6              0.000005     endif
    8              0.000020   endfor

FUNCTION  <SNR>115_job_id()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim:104
Called 8 times
Total time:   0.000386
 Self time:   0.000386

count  total (s)   self (s)
                              " Vim
    8              0.000322   return job_info(a:job).process

FUNCTION  airline#parts#ffenc()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:108
Called 124 times
Total time:   0.004171
 Self time:   0.004171

count  total (s)   self (s)
  124              0.000560   let expected = get(g:, 'airline#parts#ffenc#skip_expected_string', '')
  124              0.000306   let bomb     = &bomb ? '[BOM]' : ''
  124              0.000719   let noeolf   = &eol ? '' : '[!EOL]'
  124              0.000961   let ff       = strlen(&ff) ? '['.&ff.']' : ''
  124              0.000713   if expected is# &fenc.bomb.noeolf.ff
                                return ''
  124              0.000085   else
  124              0.000506     return &fenc.bomb.noeolf.ff
                              endif

FUNCTION  gitgutter#utility#shellescape()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:73
Called 109 times
Total time:   0.002468
 Self time:   0.002468

count  total (s)   self (s)
  109              0.002139   if a:arg =~ '^[A-Za-z0-9_/.-]\+$'
  109              0.000225     return a:arg
                              elseif s:winshell()
                                return '"' . substitute(substitute(a:arg, '"', '""', 'g'), '%', '"%"', 'g') . '"'
                              else
                                return shellescape(a:arg)
                              endif

FUNCTION  airline#util#ignore_buf()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:136
Called 124 times
Total time:   0.003898
 Self time:   0.003898

count  total (s)   self (s)
  124              0.001196   let pat = '\c\v'. get(g:, 'airline#ignore_bufadd_pat', ''). get(g:, 'airline#extensions#tabline#ignore_bufadd_pat',  '!|defx|gundo|nerd_tree|startify|tagbar|term://|undotree|vimfiler')
  124              0.002573   return match(a:name, pat) > -1

FUNCTION  airline#parts#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:49
Called 124 times
Total time:   0.000669
 Self time:   0.000669

count  total (s)   self (s)
  124              0.000594   return get(s:parts, a:key, {})

FUNCTION  airline#parts#paste()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:63
Called 124 times
Total time:   0.000542
 Self time:   0.000542

count  total (s)   self (s)
  124              0.000445   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  airline#parts#readonly()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:89
Called 124 times
Total time:   0.007114
 Self time:   0.003216

count  total (s)   self (s)
                              " only consider regular buffers (e.g. ones that represent actual files,
                              " but not special ones like e.g. NERDTree)
  124   0.005600   0.001702   if !empty(&buftype) || airline#util#ignore_buf(bufname('%'))
                                return ''
  124              0.000099   endif
  124              0.000444   if &readonly && !filereadable(bufname('%'))
                                return '[noperm]'
  124              0.000085   else
  124              0.000287     return &readonly ? g:airline_symbols.readonly : ''
                              endif

FUNCTION  gitgutter#utility#setbufvar()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:9
Called 12 times
Total time:   0.000990
 Self time:   0.000990

count  total (s)   self (s)
   12              0.000056   let buffer = +a:buffer
                              " Default value for getbufvar() was introduced in Vim 7.3.831.
   12              0.000077   let ggvars = getbufvar(buffer, 'gitgutter')
   12              0.000068   if type(ggvars) == type('')
                                unlet ggvars
                                let ggvars = {}
                                call setbufvar(buffer, 'gitgutter', ggvars)
   12              0.000016   endif
   12              0.000619   let ggvars[a:varname] = a:val

FUNCTION  airline#themes#get_highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/themes.vim:31
Called 28 times
Total time:   0.005245
 Self time:   0.000315

count  total (s)   self (s)
   28   0.005231   0.000301   return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  <SNR>95_CheckDefined()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:126
Called 68 times
Total time:   0.001834
 Self time:   0.001834

count  total (s)   self (s)
                              " Checks, whether the definition of the colors is valid and is not empty or NONE
                              " e.g. if the colors would expand to this:
                              " hi airline_c ctermfg=NONE ctermbg=NONE
                              " that means to clear that highlighting group, therefore, fallback to Normal
                              " highlighting group for the cterm values
                            
                              " This only works, if the Normal highlighting group is actually defined, so
                              " return early, if it has been cleared
   68              0.000265   if !exists("g:airline#highlighter#normal_fg_hi")
                                let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm')
   68              0.000049   endif
   68              0.000254   if empty(g:airline#highlighter#normal_fg_hi) || g:airline#highlighter#normal_fg_hi < 0
                                return a:colors
   68              0.000041   endif
                            
   68              0.000158   for val in a:colors
   68              0.000226     if !empty(val) && val !=# 'NONE'
   68              0.000093       return a:colors
                                endif
                              endfor
                              " this adds the bold attribute to the term argument of the :hi command,
                              " but at least this makes sure, the group will be defined
                              let fg = g:airline#highlighter#normal_fg_hi
                              let bg = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'cterm')
                              if bg < 0
                                " in case there is no background color defined for Normal
                                let bg = a:colors[3]
                              endif
                              return a:colors[0:1] + [fg, bg] + [a:colors[4]]

FUNCTION  airline#extensions#whitespace#check()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:64
Called 124 times
Total time:   0.024578
 Self time:   0.020279

count  total (s)   self (s)
  124              0.000619   let max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)
  124              0.000941   if &readonly || !&modifiable || !s:enabled || line('$') > max_lines || get(b:, 'airline_whitespace_disabled', 0)
                                return ''
  124              0.000095   endif
  124              0.001011   let skip_check_ft = extend(s:skip_check_ft, get(g:, 'airline#extensions#whitespace#skip_indent_check_ft', {}), 'force')
                            
  124              0.000516   if !exists('b:airline_whitespace_check')
                                let b:airline_whitespace_check = ''
                                let checks = get(b:, 'airline_whitespace_checks', get(g:, 'airline#extensions#whitespace#checks', s:default_checks))
                            
                                let trailing = 0
                                let check = 'trailing'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  try
                                    let regexp = get(g:, 'airline#extensions#whitespace#trailing_regexp', '\s$')
                                    let trailing = search(regexp, 'nw')
                                  catch
                                    call airline#util#warning(printf('Whitespace: error occurred evaluating "%s"', regexp))
                                    echomsg v:exception
                                    return ''
                                  endtry
                                endif
                            
                                let mixed = 0
                                let check = 'indent'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  let mixed = s:check_mixed_indent()
                                endif
                            
                                let mixed_file = ''
                                let check = 'mixed-indent-file'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  let mixed_file = s:check_mixed_indent_file()
                                endif
                            
                                let long = 0
                                if index(checks, 'long') > -1 && &tw > 0
                                  let long = search('\%>'.&tw.'v.\+', 'nw')
                                endif
                            
                                let conflicts = 0
                                if index(checks, 'conflicts') > -1
                                  let conflicts = s:conflict_marker()
                                endif
                            
                                if trailing != 0 || mixed != 0 || long != 0 || !empty(mixed_file) || conflicts != 0
                                  let b:airline_whitespace_check = s:symbol
                                  if strlen(s:symbol) > 0
                                    let space = (g:airline_symbols.space)
                                  else
                                    let space = ''
                                  endif
                            
                                  if s:show_message
                                    if trailing != 0
                                      let trailing_fmt = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')
                                      let b:airline_whitespace_check .= space.printf(trailing_fmt, trailing)
                                    endif
                                    if mixed != 0
                                      let mixed_indent_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mixed-indent')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_fmt, mixed)
                                    endif
                                    if long != 0
                                      let long_fmt = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')
                                      let b:airline_whitespace_check .= space.printf(long_fmt, long)
                                    endif
                                    if !empty(mixed_file)
                                      let mixed_indent_file_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format', '[%s]mix-indent-file')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_file_fmt, mixed_file)
                                    endif
                                    if conflicts != 0
                                      let conflicts_fmt = get(g:, 'airline#extensions#whitespace#conflicts_format', '[%s]conflicts')
                                      let b:airline_whitespace_check .= space.printf(conflicts_fmt, conflicts)
                                    endif
                                  endif
                                endif
  124              0.000087   endif
  124   0.005389   0.001090   return airline#util#shorten(b:airline_whitespace_check, 120, 9)

FUNCTION  <SNR>20_not_git_dir()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:59
Called 101 times
Total time:   0.016312
 Self time:   0.001902

count  total (s)   self (s)
  101   0.016232   0.001822   return s:dir(a:bufnr) !~ '[/\\]\.git\($\|[/\\]\)'

FUNCTION  coc#api#notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:583
Called 19 times
Total time:   0.003490
 Self time:   0.000584

count  total (s)   self (s)
   19   0.003462   0.000556   call call(s:funcs[a:method], a:args)

FUNCTION  airline#highlighter#exec()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:102
Called 68 times
Total time:   0.020269
 Self time:   0.004799

count  total (s)   self (s)
   68              0.000137   if pumvisible()
                                return
   68              0.000046   endif
   68              0.000124   let colors = a:colors
   68              0.000087   if s:is_win32term
                                let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
   68              0.000055   endif
   68   0.013415   0.000658   let old_hi = airline#highlighter#get_highlight(a:group)
   68              0.000173   if len(colors) == 4
   14              0.000038     call add(colors, '')
   68              0.000048   endif
   68              0.000686   let new_hi = [colors[0], colors[1], printf('%s', colors[2]), printf('%s', colors[3]), colors[4]]
   68   0.002374   0.000540   let colors = s:CheckDefined(colors)
   68   0.001489   0.000610   if old_hi != new_hi || !s:hl_group_exists(a:group)
                                let cmd = printf('hi %s%s', a:group, s:GetHiCmd(colors))
                                exe cmd
                                if has_key(s:hl_groups, a:group)
                                  let s:hl_groups[a:group] = colors
                                endif
   68              0.000037   endif

FUNCTION  <SNR>110_setup_path()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter.vim:156
Called 4 times
Total time:   0.011861
 Self time:   0.000604

count  total (s)   self (s)
    4   0.001016   0.000069   if gitgutter#utility#has_repo_path(a:bufnr) | return | endif
                            
    4   0.010770   0.000460   return gitgutter#utility#set_repo_path(a:bufnr, a:continuation)

FUNCTION  <SNR>95_group_not_done()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:26
Called 54 times
Total time:   0.000465
 Self time:   0.000465

count  total (s)   self (s)
   54              0.000197   if index(a:list, a:name) == -1
   54              0.000170     call add(a:list, a:name)
   54              0.000056     return 1
                              else
                                if &vbs
                                  echomsg printf("airline: group: %s already done, skipping", a:name)
                                endif
                                return 0
                              endif

FUNCTION  <SNR>95_get_syn()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:38
Called 384 times
Total time:   0.009575
 Self time:   0.009575

count  total (s)   self (s)
  384              0.000531   let color = ''
  384              0.001083   if hlexists(a:group)
  384              0.002278     let color = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)
  384              0.000271   endif
  384              0.001075   if empty(color) || color == -1
                                " should always exist
                                let color = synIDattr(synIDtrans(hlID('Normal')), a:what, a:mode)
                                " however, just in case
                                if empty(color) || color == -1
                                  let color = 'NONE'
                                endif
  384              0.000240   endif
  384              0.000396   return color

FUNCTION  gitgutter#utility#windows()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:236
Called 4 times
Total time:   0.000049
 Self time:   0.000049

count  total (s)   self (s)
    4              0.000040   return has('win64') || has('win32') || has('win16')

FUNCTION  airline#parts#spell()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:67
Called 124 times
Total time:   0.006441
 Self time:   0.004620

count  total (s)   self (s)
  124              0.002335   let spelllang = g:airline_detect_spelllang ? printf(" [%s]", toupper(substitute(&spelllang, ',', '/', 'g'))) : ''
  124              0.000317   if g:airline_detect_spell && &spell
  124   0.002858   0.001037     let winwidth = airline#util#winwidth()
  124              0.000266     if winwidth >= 90
  124              0.000455       return g:airline_symbols.spell . spelllang
                                elseif winwidth >= 70
                                  return g:airline_symbols.spell
                                else
                                  return split(g:airline_symbols.spell, '\zs')[0]
                                endif
                              endif
                              return ''

FUNCTION  gitgutter#hunk#summary()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim:20
Called 97 times
Total time:   0.003018
 Self time:   0.001174

count  total (s)   self (s)
   97   0.002974   0.001130   return gitgutter#utility#getbufvar(a:bufnr, 'summary', [0,0,0])

FUNCTION  <SNR>20_filename()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:219
Called 4 times
Total time:   0.000788
 Self time:   0.000093

count  total (s)   self (s)
    4   0.000785   0.000090   return fnamemodify(s:abs_path(a:bufnr, 0), ':t')

FUNCTION  <SNR>96_is_branch_empty()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:55
Called 124 times
Total time:   0.000946
 Self time:   0.000946

count  total (s)   self (s)
  124              0.000848   return exists('*airline#extensions#branch#head') && empty(get(b:, 'airline_head', ''))

FUNCTION  airline#parts#crypt()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:59
Called 124 times
Total time:   0.001033
 Self time:   0.001033

count  total (s)   self (s)
  124              0.000928   return g:airline_detect_crypt && exists("+key") && !empty(&key) ? g:airline_symbols.crypt : ''

FUNCTION  <SNR>22_on_cursor_moved()
    Defined: ~/.vim/plugged/vim-airline/plugin/airline.vim:83
Called 67 times
Total time:   0.001923
 Self time:   0.001368

count  total (s)   self (s)
   67              0.000540   if winnr() != s:active_winnr || !exists('w:airline_active')
                                call s:on_window_changed('CursorMoved')
   67              0.000061   endif
   67   0.001045   0.000490   call airline#update_tabline()

FUNCTION  <SNR>115_on_stderr_vim()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim:83
Called 8 times
Total time:   0.001077
 Self time:   0.000477

count  total (s)   self (s)
    8   0.000711   0.000111   call self.handler.err(self.buffer)

FUNCTION  coc#_do_complete()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:61
Called 11 times
Total time:   0.000603
 Self time:   0.000603

count  total (s)   self (s)
   11              0.000332   let g:coc#_context = { 'start': a:start, 'candidates': a:items, 'preselect': a:preselect}
   11              0.000140   if mode() =~# 'i' && &paste != 1
   11              0.000092     call feedkeys("\<Plug>CocRefresh", 'i')
   11              0.000014   endif

FUNCTION  GitGutterGetHunkSummary()
    Defined: ~/.vim/plugged/vim-gitgutter/plugin/gitgutter.vim:187
Called 124 times
Total time:   0.050206
 Self time:   0.002597

count  total (s)   self (s)
  124              0.000436   let bufnr = bufnr('')
  124   0.049657   0.002048   return gitgutter#utility#is_active(bufnr) ? gitgutter#hunk#summary(bufnr) : [0,0,0]

FUNCTION  airline#parts#mode()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:55
Called 124 times
Total time:   0.007233
 Self time:   0.001874

count  total (s)   self (s)
  124   0.007092   0.001733   return airline#util#shorten(get(w:, 'airline_current_mode', ''), 79, 1)

FUNCTION  <SNR>20_is_file_buffer()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:63
Called 101 times
Total time:   0.000684
 Self time:   0.000684

count  total (s)   self (s)
  101              0.000630   return empty(getbufvar(a:bufnr, '&buftype'))

FUNCTION  <SNR>20_dir()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:214
Called 105 times
Total time:   0.015175
 Self time:   0.002059

count  total (s)   self (s)
  105   0.015100   0.001984   return gitgutter#utility#shellescape(fnamemodify(s:abs_path(a:bufnr, 0), ':h'))

FUNCTION  coc#_complete()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:49
Called 12 times
Total time:  18.274906
 Self time:   0.812367

count  total (s)   self (s)
   12              0.000083   let items = get(g:coc#_context, 'candidates', [])
   12              0.000048   let preselect = get(g:coc#_context, 'preselect', -1)
   12  18.274590   0.812051   call complete( g:coc#_context.start + 1, items)
   12              0.000068   if s:select_api && len(items) && preselect != -1
                                call nvim_select_popupmenu_item(preselect, v:false, v:false, {})
   12              0.000010   endif
   12              0.000018   return ''

FUNCTION  <SNR>17_request()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:153
Called 1 time
Total time:   0.003698
 Self time:   0.003420

count  total (s)   self (s)
    1   0.000016   0.000011   let channel = coc#client#get_channel(self)
    1              0.000004   if empty(channel) | return '' | endif
    1              0.000001   try
    1              0.000001     if s:is_vim
    1   0.003543   0.003270       let res = ch_evalexpr(channel, [a:method, a:args], {'timeout': 60 * 1000})
    1              0.000033       if type(res) == 1 && res ==# ''
                                    throw 'request '.a:method. ' '.string(a:args).' timeout after 60s'
    1              0.000002       endif
    1              0.000005       let [l:errmsg, res] =  res
    1              0.000004       if !empty(l:errmsg)
                                    throw l:errmsg
    1              0.000001       else
    1              0.000002         return res
                                  endif
                                else
                                  return call('rpcrequest', [channel, a:method] + a:args)
                                endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0) | return | endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on request ('.a:method.'): '.v:exception | echohl None
                                endif
    1              0.000003   endtry

FUNCTION  coc#float#check_related()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:798
Called 2 times
Total time:   0.000303
 Self time:   0.000303

count  total (s)   self (s)
    2              0.000023   let invalids = []
    2              0.000010   if s:is_vim
    2              0.000022     if !exists('*popup_list')
                                  return
    2              0.000004     endif
    2              0.000016     for id in popup_list()
                                  let target = getwinvar(id, 'target_winid', 0)
                                  if (target && !s:popup_visible(target)) || getwinvar(id, 'kind', '') == 'pum'
                                    call add(invalids, id)
                                  endif
    2              0.000006     endfor
                              else
                                for i in range(1, winnr('$'))
                                  let target = getwinvar(i, 'target_winid', 0)
                                  if target && !nvim_win_is_valid(target)
                                    call add(invalids, win_getid(i))
                                  elseif getwinvar(i, 'kind', '') == 'pum'
                                    call add(invalids, win_getid(i))
                                  endif
                                endfor
    2              0.000002   endif
    2              0.000006   for id in invalids
                                call coc#float#close(id)
    2              0.000004   endfor

FUNCTION  airline#statusline()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:190
Called 124 times
Total time:   0.002332
 Self time:   0.002332

count  total (s)   self (s)
  124              0.001048   if has_key(s:contexts, a:winnr)
  124              0.001065     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  gitgutter#utility#is_active()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim:50
Called 128 times
Total time:   0.047905
 Self time:   0.004696

count  total (s)   self (s)
  128   0.047792   0.004583   return g:gitgutter_enabled && gitgutter#utility#getbufvar(a:bufnr, 'enabled', 1) && !pumvisible() && s:is_file_buffer(a:bufnr) && s:exists_file(a:bufnr) && s:not_git_dir(a:bufnr)

FUNCTION  <SNR>98_ws_refresh()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:185
Called 3 times
Total time:   0.000079
 Self time:   0.000079

count  total (s)   self (s)
    3              0.000045   if get(b:, 'airline_ws_changedtick', 0) == b:changedtick
    2              0.000005     return
    1              0.000001   endif
    1              0.000009   unlet! b:airline_whitespace_check
    1              0.000006   if get(g:, 'airline_skip_empty_sections', 0)
                                exe ':AirlineRefresh!'
    1              0.000001   endif
    1              0.000004   let b:airline_ws_changedtick = b:changedtick

FUNCTION  CloseFloatWin()
    Defined: ~/.vim/plugged/Nvim-R/R/common_global.vim:3632
Called 12 times
Total time:   0.000273
 Self time:   0.000273

count  total (s)   self (s)
   12              0.000063     if has('nvim')
                                    let id = win_id2win(s:float_win)
                                    if id > 0
                                        call nvim_win_close(s:float_win, 1)
                                        let s:float_win = 0
                                    endif
   12              0.000010     else
   12              0.000039         call popup_close(s:float_win)
   12              0.000030         let s:float_win = 0
   12              0.000011     endif

FUNCTION  airline#highlighter#get_highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:62
Called 96 times
Total time:   0.017687
 Self time:   0.007431

count  total (s)   self (s)
                              " only check for the cterm reverse attribute
                              " TODO: do we need to check all modes (gui, term, as well)?
   96              0.000622   let reverse = synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')
   96              0.000430   if get(g:, 'airline_highlighting_cache', 0) && has_key(s:hl_groups, a:group)
                                let res = s:hl_groups[a:group]
                                return reverse ? [ res[1], res[0], res[3], res[2], res[4] ] : res
   96              0.000067   else
   96   0.003277   0.000753     let ctermfg = s:get_syn(a:group, 'fg', 'cterm')
   96   0.003124   0.000714     let ctermbg = s:get_syn(a:group, 'bg', 'cterm')
   96   0.003041   0.000715     let guifg = s:get_syn(a:group, 'fg', 'gui')
   96   0.003009   0.000694     let guibg = s:get_syn(a:group, 'bg', 'gui')
   96              0.000512     let bold = synIDattr(synIDtrans(hlID(a:group)), 'bold')
   96              0.000107     if reverse
                                  let res = s:get_array(guibg, guifg, ctermbg, ctermfg, bold ? ['bold'] : a:000)
   96              0.000068     else
   96   0.001606   0.000925       let res = s:get_array(guifg, guibg, ctermfg, ctermbg, bold ? ['bold'] : a:000)
   96              0.000072     endif
   96              0.000055   endif
   96              0.000370   let s:hl_groups[a:group] = res
   96              0.000106   return res

FUNCTION  airline#highlighter#highlight_modified_inactive()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:223
Called 2 times
Total time:   0.000064
 Self time:   0.000064

count  total (s)   self (s)
    2              0.000011   if getbufvar(a:bufnr, '&modified')
    2              0.000025     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
                              else
                                let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
    2              0.000001   endif
                            
    2              0.000005   if !empty(colors)
                                call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
    2              0.000000   endif

FUNCTION  53()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:226
Called 1 time
Total time:   0.000011
 Self time:   0.000011

count  total (s)   self (s)
    1              0.000010   return getbufvar(a:bufnr, 'changedtick')

FUNCTION  coc#rpc#notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:95
Called 240 times
Total time:   0.031439
 Self time:   0.005554

count  total (s)   self (s)
  240   0.004326   0.001708   if !coc#rpc#ready()
                                return ''
  240              0.000160   endif
  240   0.026029   0.002762   call s:client['notify'](a:method, a:args)
  240              0.000334   return ''

FUNCTION  airline#extensions#hunks#get_hunks()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:95
Called 124 times
Total time:   0.089172
 Self time:   0.021794

count  total (s)   self (s)
  124              0.000463   if !get(w:, 'airline_active', 0)
                                return ''
  124              0.000088   endif
                              " Cache values, so that it isn't called too often
  124   0.003726   0.002830   if exists("b:airline_hunks") && get(b:,  'airline_changenr', 0) == b:changedtick && airline#util#winwidth() == get(s:, 'airline_winwidth', 0) && get(b:, 'source_func', '') isnot# 's:get_hunks_signify' && get(b:, 'source_func', '') isnot# 's:get_hunks_gitgutter' && get(b:, 'source_func', '') isnot# 's:get_hunks_empty' && get(b:, 'source_func', '') isnot# 's:get_hunks_changes' && get(b:, 'source_func', '') isnot# 's:get_hunks_coc'
                                return b:airline_hunks
  124              0.000087   endif
  124   0.061077   0.001207   let hunks = airline#extensions#hunks#get_raw_hunks()
  124              0.000327   let string = ''
  124   0.002048   0.001379   let winwidth = get(airline#parts#get('hunks'), 'minwidth', 100)
  124              0.000322   if !empty(hunks)
                                " hunks should contain [added, changed, deleted]
  496              0.001005     for i in [0, 1, 2]
  372   0.007796   0.003527       if (s:non_zero_only == 0 && airline#util#winwidth() > winwidth) || hunks[i] > 0
  372              0.003284         let string .= printf('%s%s ', s:hunk_symbols[i], hunks[i])
  372              0.000326       endif
  496              0.000495     endfor
  124              0.000097   endif
  124   0.002150   0.001827   if index(airline#extensions#get_loaded_extensions(), 'branch') == -1 && string[-1:] == ' '
                                " branch extension not loaded, skip trailing whitespace
  124              0.000411     let string = string[0:-2]
  124              0.000091   endif
                            
  124              0.000295   let b:airline_hunks = string
  124              0.000284   let b:airline_changenr = b:changedtick
  124   0.002245   0.000894   let s:airline_winwidth = airline#util#winwidth()
  124              0.000162   return string

FUNCTION  StartFloatWin()
    Defined: ~/.vim/plugged/Nvim-R/R/common_global.vim:3651
Called 32 times
Total time:   0.001354
 Self time:   0.001354

count  total (s)   self (s)
   32              0.000094     if ! pumvisible()
                                    return
   32              0.000020     endif
                                " Other plugins (example, ncm-R) fill the 'user_data' dictionary
   32              0.000212     if has_key(v:event, 'completed_item') && has_key(v:event['completed_item'], 'word')
                                    if s:user_data != {}
                                        let s:compl_event = deepcopy(v:event)
                                        let s:compl_event['completed_item']['user_data'] = deepcopy(s:user_data[v:event['completed_item']['word']])
                                        call timer_start(1, 'CreateNewFloat', {})
                                    elseif has_key(v:event['completed_item'], 'user_data') && type(v:event['completed_item']['user_data']) == v:t_dict && has_key(v:event['completed_item']['user_data'], 'cls')
                                        let s:compl_event = deepcopy(v:event)
                                        " Neovim doesn't allow to open a float window from here:
                                        call timer_start(1, 'CreateNewFloat', {})
                                    endif
   32              0.000056     elseif s:float_win
                                    call CloseFloatWin()
   32              0.000022     endif

FUNCTION  airline#util#prepend()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:63
Called 620 times
Total time:   0.005140
 Self time:   0.005140

count  total (s)   self (s)
  620              0.001661   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  620              0.000365   endif
  620              0.002085   return empty(a:text) ? '' : a:text.s:spc.g:airline_right_alt_sep.s:spc

FUNCTION  pandoc#folding#FoldExpr()
    Defined: ~/.vim/plugged/vim-pandoc/autoload/pandoc/folding.vim:113
Called 168685 times
Total time:  39.515257
 Self time:  19.636281

count  total (s)   self (s)
                                " with multiple splits in the same buffer, the folding code can be called
                                " way too many times too often, so it's best to disable it to keep good
                                " performance. Only enable when using the built-in method of improving
                                " performance of folds.
168685              0.282854     if g:pandoc#folding#fastfolds == 1
                                    if count(map(range(1, winnr('$')), 'bufname(winbufnr(v:val))'), bufname('')) > 1
                                        return
                                    endif
168685              0.098046     endif
                            
168685              0.495018     let vline = getline(v:lnum)
                                " fold YAML headers
168685              0.249838     if g:pandoc#folding#fold_yaml == 1
                                    if vline =~# '\(^---$\|^...$\)' && synIDattr(synID(v:lnum , 1, 1), 'name') =~? '\(delimiter\|yamldocumentstart\)'
                                        if vline =~# '^---$' && v:lnum == 1
                                            return '>' . g:pandoc#folding#foldlevel_yaml
                                        elseif synIDattr(synID(v:lnum - 1, 1, 1), 'name') ==# 'yamlkey'
                                            return '<' . g:pandoc#folding#foldlevel_yaml
                                        elseif synIDattr(synID(v:lnum - 1, 1, 1), 'name') ==# 'pandocYAMLHeader'
                                            return '<' . g:pandoc#folding#foldlevel_yaml
                                        elseif synIDattr(synID(v:lnum - 1, 1, 1), 'name') ==# 'yamlBlockMappingKey'
                                            return '<' . g:pandoc#folding#foldlevel_yaml
                                        else
                                            return '='
                                        endif
                                    endif
168685              0.095579     endif
                            
                                " fold divs for special classes
168685              0.834672     let div_classes_regex = '('.join(g:pandoc#folding#fold_div_classes, '|').')'
168685              0.949461     if vline =~? '<div class=.'.div_classes_regex
                                    return 'a1'
                                " the `endfold` attribute must be set, otherwise we can remove folds
                                " incorrectly (see issue #32)
                                " pandoc ignores this attribute, so this is safe.
168685              0.721295     elseif vline =~? '</div endfold>'
                                    return 's1'
168685              0.111836     endif
                            
                                " fold markers?
168685              0.263957     if g:pandoc#folding#fold_vim_markers == 1
168685              1.986819         if vline =~# '[{}]\{3}'
                                        if g:pandoc#folding#vim_markers_in_comments_only == 1
                                            let mark_head = '<!--.*'
                                        else
                                            let mark_head = ''
                                        endif
                                        if vline =~# mark_head.'{\{3}'
                                            let level = matchstr(vline, '\({\{3}\)\@<=\d')
                                            if level !=# ''
                                                return '>'.level
                                            else
                                                return 'a1'
                                            endif
                                        endif
                                        if vline =~# mark_head.'}\{3}'
                                            let level = matchstr(vline, '\(}\{3}\)\@<=\d')
                                            if level !=# ''
                                                return '<'.level
                                            else
                                                return 's1'
                                            endif
                                        endif
168685              0.107931         endif
168685              0.106072     endif
                            
                                " Delegate to filetype specific functions
168685              0.715024     if &filetype =~# 'markdown' || &filetype ==# 'pandoc' || &filetype ==# 'rmd'
                                    " vim-pandoc-syntax sets this variable, so we can check if we can use
                                    " syntax assistance in our foldexpr function
168685              0.669975         if exists('g:vim_pandoc_syntax_exists') && b:pandoc_folding_basic != 1
168685  21.092504   1.213528             return pandoc#folding#MarkdownLevelSA()
                                    " otherwise, we use a simple, but less featureful foldexpr
                                    else
                                        return pandoc#folding#MarkdownLevelBasic()
                                    endif
                                elseif &filetype ==# 'textile'
                                    return pandoc#folding#TextileLevel()
                                endif
                            

FUNCTION  <SNR>115_on_exit_vim()
    Defined: ~/.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim:87
Called 4 times
Total time:   0.000445
 Self time:   0.000358

count  total (s)   self (s)
    4              0.000042   let job = ch_getjob(a:channel)
    4   0.000142   0.000055   let jobid = s:job_id(job)
    4              0.000068   if has_key(s:jobs, jobid) | unlet s:jobs[jobid] | endif
    4              0.000035   while 1
    4              0.000021     if job_status(job) == 'dead'
    4              0.000038       let exit_code = job_info(job).exitval
    4              0.000006       break
                                endif
                                sleep 5m
    4              0.000006   endwhile
                            
    4              0.000006   if !exit_code
                                call self.handler.out(self.buffer, join(self.stdoutbuffer, "\n"))
    4              0.000003   endif

FUNCTION  airline#extensions#get_loaded_extensions()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions.vim:500
Called 124 times
Total time:   0.000323
 Self time:   0.000323

count  total (s)   self (s)
  124              0.000247   return s:loaded_ext

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
168685  39.515257  19.636281  pandoc#folding#FoldExpr()
168685  19.878976             pandoc#folding#MarkdownLevelSA()
   12  18.274906   0.812367  coc#_complete()
  124   0.089172   0.021794  airline#extensions#hunks#get_hunks()
  124   0.059870   0.005830  airline#extensions#hunks#get_raw_hunks()
  124   0.054040   0.002888  <SNR>96_get_hunks_gitgutter()
  124   0.051943   0.019468  airline#check_mode()
  124   0.050206   0.002597  GitGutterGetHunkSummary()
  128   0.047905   0.004696  gitgutter#utility#is_active()
   56   0.043518   0.003711  coc#api#call()
  239   0.035228   0.003878  <SNR>14_Autocmd()
   19   0.035125   0.000867  30()
    4   0.033632             coc#util#get_complete_option()
    2   0.032124   0.005467  airline#highlighter#highlight()
  240   0.031439   0.005554  coc#rpc#notify()
  214   0.030125             <SNR>20_abs_path()
  124   0.024578   0.020279  airline#extensions#whitespace#check()
  101   0.023645   0.005509  <SNR>20_exists_file()
  240   0.023267   0.021938  <SNR>17_notify()
  114   0.023218   0.021992  <SNR>33_Highlight_Matching_Pair()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
168685             19.878976  pandoc#folding#MarkdownLevelSA()
168685  39.515257  19.636281  pandoc#folding#FoldExpr()
   12  18.274906   0.812367  coc#_complete()
    4              0.033632  coc#util#get_complete_option()
  214              0.030125  <SNR>20_abs_path()
  114   0.023218   0.021992  <SNR>33_Highlight_Matching_Pair()
  240   0.023267   0.021938  <SNR>17_notify()
  124   0.089172   0.021794  airline#extensions#hunks#get_hunks()
  124   0.024578   0.020279  airline#extensions#whitespace#check()
  124   0.051943   0.019468  airline#check_mode()
 1314              0.015638  airline#util#winwidth()
  868              0.013575  airline#util#append()
  384              0.009575  <SNR>95_get_syn()
  372   0.013775   0.009055  airline#util#shorten()
 1116   0.009068   0.007824  airline#util#wrap()
  248              0.007787  airline#extensions#coc#get()
   96   0.017687   0.007431  airline#highlighter#get_highlight()
  124              0.007044  airline#extensions#keymap#status()
  124   0.059870   0.005830  airline#extensions#hunks#get_raw_hunks()
    4   0.006238   0.005649  gitgutter#async#execute()

